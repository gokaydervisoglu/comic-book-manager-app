/**
 * The com.mehmetali.comic_manager package contains classes related to the Comic Manager application.
 */
package com.mehmetali.comic_manager;

//590

import java.util.Scanner;
import java.io.IOException;
import java.io.PrintStream;


/**
 * Main class for managing the comic manager application.
 * This class provides methods for user interaction and menu navigation.
 *
 * The Main class serves as the entry point for the application and orchestrates user interaction.
 *
 * @author mehmetali
 * @version 1.0
 */
public class Main {

  /**
   * The username of the logged-in user.
   */
  public static String LoginName;

  /**
   * The wallet balance of the logged-in user.
   */
  public static int LoginWallet;


  private static final Scanner scanner = new Scanner(System.in); /**< The scanner object used for user input. */


  private static final UserManager userManager = new UserManager(); /**< The user manager instance for managing user-related operations. */


  private static final BookManager comicmanager = new BookManager(); /**< The comic manager instance for managing comic book-related operations. */


  private static final WishManager wishmanager = new WishManager(); /**< The wish manager instance for managing wish-related operations. */


  private static final TradeManager trademanager = new TradeManager(); /**< The trade manager instance for managing trade-related operations. */


  private static final EventManager eventmanager = new EventManager(); /**< The event manager instance for managing event-related operations. */


  public static boolean control = false; /**< Boolean variable indicating control status. */





  /**
     * Prints the menu with the specified title and options.
     *
     * @param title   The title of the menu.
     * @param options An array of strings representing the menu options.
     */
  private static void printMenu(String title, String[] options) {
    System.out.println("|===============================================================================|");
    System.out.println("|" + centerText(title, 79) + "|");
    System.out.println("|===============================================================================|");
    int wallet = userManager.getUserWallet(LoginName);

    if(control == false) {
      System.out.println("|" + rightPad("User: " + LoginName, 79) + "|");
      System.out.println("|" + rightPad("Money: " + wallet, 79) + "|");
    }

    for (String option : options) {
      System.out.println("|" + centerText(option, 79) + "|");
    }

    System.out.println("|===============================================================================|");
    System.out.print("Enter your choice: ");
  }

  /**
    * Pads the given text on the right side with spaces to make its length equal to the specified length.
    *
    * @param text   The text to pad.
    * @param length The desired length of the padded text.
    * @return The padded text.
    */

  private static String rightPad(String text, int length) {
    return String.format("%-" + length + "s", text);
  }

  /**
    * Centers the given text within a string of the specified length by padding it with spaces on both sides.
    *
    * @param text   The text to center.
    * @param length The desired length of the string containing the centered text.
    * @return The string containing the centered text.
    */


  private static String centerText(String text, int length) {
    int spaces = length - text.length();
    int before = spaces / 2;
    int after = spaces - before;
    return " ".repeat(before) + text + " ".repeat(after);
  }

  /**
   * Clears the console screen.
   * <p>
   * On Windows, it uses the "cls" command through the command prompt. On Unix/Linux/Mac systems,
   * it clears the console screen by printing specific escape characters.
   * </p>
   */

  public static void clearConsole() {
    try {
      // Windows
      if (System.getProperty("os.name").contains("Windows")) {
        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
      }
      // Unix/Linux/Mac
      else {
        System.out.print("\033[H\033[2J");
        System.out.flush();
      }
    } catch (IOException | InterruptedException ex) {
      // Handle exception
      ex.printStackTrace();
    }
  }

  /**
   * The entry point of the application.
   *
   * @param args The command line arguments.
   * @throws IOException If an I/O error occurs.
   */
  public static void main(String[] args) throws IOException {
    Scanner scanner = new Scanner(System.in);
    MainApp(scanner, System.out);
  }

  /**
   * Runs the main application loop.
   *
   * @param scanner The scanner object for input.
   * @param out     The output stream for printing.
   * @return An integer indicating the success status of the application.
   * @throws IOException If an I/O error occurs.
   */

  public static int MainApp(Scanner scanner, PrintStream out) throws IOException {
    boolean exit = false;

    while (!exit) {
      control = true;
      
      String title = "MAIN MENU";
      String[] options = {
        "1. Register",
        "2. Login",
        "3. Exit"
      };
      printMenu(title, options);
      int choice = scanner.nextInt();
      scanner.nextLine();
      control = false;

      switch (choice) {
        case 1:
          registerMenu(scanner, System.out);
          break;

        case 2:
          User loggedInUser = loginMenu(scanner, System.out);
          setLoginName(loggedInUser.getUsername());
          setWallet(loggedInUser.getWallet());

          if (loggedInUser != null) {
            //clearConsole();
            userMenu(loggedInUser,scanner, System.out);
          }

          break;

        case 3:
          exit = true;
          break;
      }
    }

    scanner.close();
    return 0;
  }

  /**
   * Registers a new user.
   *
   * @param scanner The scanner object for input.
   * @param out     The output stream for printing.
   * @return An integer indicating the success status of the registration process.
   * @throws IOException If an I/O error occurs.
   */


  public static int registerMenu(Scanner scanner, PrintStream out) throws IOException {
    System.out.print("UserName: ");
    String username = scanner.nextLine();
    System.out.print("Password: ");
    String password = scanner.nextLine();
    User newUser = new User(username, password, 0);
    
    userManager.registerUser(newUser);
    
    return 0;
  }

  //ComicBook
  /**
   * Adds a new book to the book management system.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful addition of the book.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int AddBookMenu(Scanner scanner, PrintStream out) throws IOException {
    System.out.print("Book ID: ");
    int bookId = scanner.nextInt();
    scanner.nextLine();
    System.out.print("Book Name: ");
    String bookName = scanner.nextLine();
    System.out.print("Book Page Number: ");
    int bookpage = scanner.nextInt();
    System.out.print("Book Value: ");
    int bookvalue = scanner.nextInt();
    Book newUser = new Book(bookId, bookName,bookpage,LoginName,bookvalue);
    comicmanager.AddBook(newUser);
    return 0;
  }

  /**
   * Displays the list of books owned by the current user.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful display of the book list.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int listBookMenu(Scanner scanner, PrintStream out) throws IOException {
    out.println("Book List");
    comicmanager.listBooksByCondition(LoginName);
    return 0;
  }

  /**
   * Displays the list of all books in the system.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful display of the book list.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int listAllBookMenu(Scanner scanner, PrintStream out) throws IOException {
    out.println("Book All List");
    comicmanager.listBooks();
    return 0;
  }

  /**
   * Deletes a book from the system by its ID.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful deletion of the book.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int deleteBookMenu(Scanner scanner, PrintStream out) throws IOException {
    out.print("Book ID: ");
    int bookId = scanner.nextInt();
    comicmanager.deleteBookByID(bookId);
    return 0;
  }


  /**
   * Updates the details of a book in the system by its ID.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful update of the book details.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int updateBookMenu(Scanner scanner, PrintStream out) throws IOException {
    // Prompting user for the ID of the book to be updated
    out.print("Book ID: ");
    int bookId = scanner.nextInt();
    scanner.nextLine(); // Consume newline character
    // Prompting user for the new details of the book
    out.print("New Book Name: ");
    String bookName = scanner.nextLine();
    out.print("New Book Page Number: ");
    int bookpage = scanner.nextInt();
    scanner.nextLine(); // Consume newline character
    out.print("New Book Value: ");
    int bookvalue = scanner.nextInt();
    scanner.nextLine(); // Consume newline character
    // Updating the details of the book in the system
    comicmanager.updateBookTitleByID(bookId, bookName, bookpage, bookvalue);
    return 0; // Returning 0 to indicate successful update
  }


  //WishList

  /**
   * Adds a book to the wish list of the current user.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful addition of the book to the wish list,
   *         or -1 if the book ID is not available in the system.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int WishAddBookMenu(Scanner scanner, PrintStream out) throws IOException {
    // Prompting user for the ID of the book to be added to the wish list
    out.print("Book ID: ");
    int bookId = scanner.nextInt();
    scanner.nextLine(); // Consume newline character

    // Checking if the book ID is available in the system
    if (comicmanager.isBookIDAvailable(bookId)) {
      out.println("No such book found.");
      return -1; // Returning -1 if the book ID is not available
    }

    // Retrieving book details for wish list entry
    int pageNumber = comicmanager.getBookPageNumberByID(bookId);
    String title = comicmanager.getBookTitleByID(bookId);
    int value = comicmanager.getBookPageNumberByID(bookId);
    // Creating a new Wish object and adding it to the wish list
    Wish newUser = new Wish(bookId, title, pageNumber, LoginName, value);
    wishmanager.AddBook(newUser);
    return 0; // Returning 0 to indicate successful addition to the wish list
  }


  /**
   * Displays the wish list of books owned by the current user.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful display of the wish list.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int WishlistBookMenu(Scanner scanner, PrintStream out) throws IOException {
    out.println("Wish Book List");
    wishmanager.listBooksByUser(LoginName);
    return 0;
  }

  /**
   * Deletes a book from the wish list by its ID.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful deletion of the book from the wish list.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int WishdeleteBookMenu(Scanner scanner, PrintStream out) throws IOException {
    out.print("Book ID: ");
    int bookId = scanner.nextInt();
    wishmanager.deleteBookByID(bookId);
    return 0;
  }


  //TradeList


  /**
   * Adds a book to the trade list of the current user and removes it from their collection.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful addition of the book to the trade list.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int TradeAddBookMenu(Scanner scanner, PrintStream out) throws IOException {
    out.print("Book ID: ");
    int bookId = scanner.nextInt();
    // Retrieving book details for trade list entry
    int pageNumber = comicmanager.getBookPageNumberByID(bookId);
    String title = comicmanager.getBookTitleByID(bookId);
    int value = comicmanager.getBookValueByID(bookId);
    // Creating a new Trade object and adding it to the trade list
    Trade newUser = new Trade(bookId, title, pageNumber, LoginName, value);
    trademanager.AddTrade(newUser);
    // Deleting the book from the collection
    comicmanager.deleteBookByID(bookId);
    return 0; // Returning 0 to indicate successful addition to the trade list
  }

  /**
   * Displays the trade list of books owned by the current user.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful display of the trade list.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int TradeMylistBookMenu(Scanner scanner, PrintStream out) throws IOException {
    // Displaying the trade list of the current user
    trademanager.listMyTradeList(LoginName);
    return 0;
  }

  /**
   * Deletes a book from the trade list by its ID.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful deletion of the book from the trade list.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int TradedeleteBookMenu(Scanner scanner, PrintStream out) throws IOException {
    out.print("Book ID: ");
    int bookId = scanner.nextInt();
    trademanager.deleteTradeByID(bookId);
    return 0;
  }


  /**
   * Displays the list of all books available for trade.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful display of the trade list.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int TradeAllListBookMenu(Scanner scanner, PrintStream out) throws IOException {
    out.println("Book List");
    trademanager.listAllTradeList();
    return 0;
  }

  /**
   * Buys a book from the trade list by its ID if the user's credit score is sufficient.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful purchase of the book, or -1 if the user's credit score is insufficient.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int TradeBuyBookMenu(Scanner scanner, PrintStream out) throws IOException {
    out.print("Book ID: ");
    int bookId = scanner.nextInt();

    // Checking if the user's credit score is sufficient to buy the book
    if (LoginWallet >= trademanager.getBookValueByID(bookId)) {
      trademanager.BuyTradeByID(bookId);
    } else {
      out.println("Credit Score Insufficient! Could not purchase.");
      return -1;
    }

    return 0;
  }

  /**
   * Increases the user's credit score by the specified amount.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful update of the user's credit score.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int CreditBuyScoreMenu(Scanner scanner, PrintStream out) throws IOException {
    out.println("Credit Score:");
    int score = scanner.nextInt();
    userManager.creditbuyscore(LoginName, score);
    return 0;
  }



  /**
   * Adds a new event to the event management system.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful addition of the event.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int EventAddBookMenu(Scanner scanner, PrintStream out) throws IOException {
    // Prompting user for event details
    out.print("Event ID: ");
    int eventId = scanner.nextInt();
    scanner.nextLine(); // Consume newline character
    out.print("Event Name: ");
    String eventName = scanner.nextLine();
    out.print("Event Content: ");
    String eventContent = scanner.nextLine();
    // Creating a new Event object with the provided details
    Event newEvent = new Event(eventId, eventName, eventContent, LoginName);
    // Adding the new event to the event management system
    eventmanager.AddEvent(newEvent);
    return 0; // Returning 0 to indicate successful addition
  }

  /**
   * Displays the list of events related to the current user.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful display of the event list.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int EventlistBookMenu(Scanner scanner, PrintStream out) throws IOException {
    out.println("Event List");
    eventmanager.listEventsByCondition(LoginName);
    return 0;
  }

  /**
   * Displays the list of all events in the system.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful display of all events.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int EventlistAllBookMenu(Scanner scanner, PrintStream out) throws IOException {
    out.println("Event All List");
    eventmanager.listEvents();
    return 0;
  }


  /**
   * Deletes an event from the event management system by its ID.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful deletion of the event.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int EventdeleteBookMenu(Scanner scanner, PrintStream out) throws IOException {
    out.print("Event ID: ");
    int eventId = scanner.nextInt();
    // Deleting the event from the event management system
    eventmanager.deleteEventByID(eventId);
    return 0;
  }

  /**
   * Updates the details of an event in the event management system by its ID.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful update of the event details.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public static int EventupdateBookMenu(Scanner scanner, PrintStream out) throws IOException {
    // Prompting user for the ID of the event to be updated
    out.print("Event ID: ");
    int eventId = scanner.nextInt();
    scanner.nextLine(); // Consume newline character
    // Prompting user for the new details of the event
    out.print("New Event Name: ");
    String eventName = scanner.nextLine();
    out.print("New Event Content: ");
    String eventContent = scanner.nextLine();
    // Updating the details of the event in the event management system
    eventmanager.updateEventTitleByID(eventId, eventName, eventContent);
    return 0; // Returning 0 to indicate successful update
  }
  
 /**
  * Handles the login process for the user.
  * 
  * @param scanner Scanner object to read user input.
  * @param out PrintStream object to display output to the user.
  * @return User object representing the logged-in user, or null if login fails.
  * @throws IOException if an I/O error occurs.
  */
  /*
  public static User loginMenu(Scanner scanner, PrintStream out) throws IOException {
	    User user = null;
	    boolean loggedIn = false;

	    do {
	        // Prompting user for username and password
	        out.print("UserName: ");
	        String username = scanner.nextLine();
	        out.print("Password: ");
	        String password = scanner.nextLine();
	        
	        // Attempting to log in the user
	       user = userManager.login(username, password);

	        // Displaying login result
	        if (user != null) {
	            clearConsole();
	            out.println("Hello, " + user.getUsername() + "!");
	            loggedIn = true;
	        } else {
	            clearConsole();
	            out.println("Username or password is wrong!");
	            out.println("Please try again.");
	        }
	    } while (!loggedIn);

	    return user; // Returning the logged-in user object
	}
*/

  /**
   * Allows a user to log in to the system using their username and password.
   *
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns the User object corresponding to the logged-in user if successful,
   *         or null if the login attempt fails.
   * @throws IOException Signals that an I/O exception has occurred.
   */
  
  public static User loginMenu(Scanner scanner, PrintStream out) throws IOException {
    // Prompting user for username and password
    out.print("UserName: ");
    String username = scanner.nextLine();
    out.print("Password: ");
    String password = scanner.nextLine();
    // Attempting to log in the user
    User user = userManager.login(username, password);

    // Displaying login result
    if (user != null) {
    	clearConsole();
      out.println("Hello, " + user.getUsername() + "!");
    } else {
    	clearConsole();
      out.println("Username or password is wrong!");
      
    }

    return user; // Returning the logged-in user object or null if login fails
  }

  /**
   * Displays the user menu and allows the user to interact with the system based on their role.
   *
   * @param user The User object representing the currently logged-in user.
   * @param scanner A Scanner object for user input.
   * @param out A PrintStream object for output.
   * @return Returns 0 upon successful completion of user interaction.
   * @throws IOException Signals that an I/O exception has occurred.
   */

  public static int userMenu(User user,Scanner scanner, PrintStream out) throws IOException {
    boolean exit = false;

    while (!exit) {
      String title = "USER MENU";
      String[] options = {
        "1. Cataloging Comic Book Collection",
        "2. Wishlist and Trade List Management",
        "3. Comic Book Events and Conventions",
        "4. Buy Credit Score",
        "5. Exit"
      };
      printMenu(title, options);
      int choice = scanner.nextInt();
      scanner.nextLine();

      while (choice != 6) {
        switch (choice) {
          case 1:
        	  clearConsole();
            System.out.println("Cataloging Comic Book Collection");
            String title2 = "MY BOOK MENU";
            String[] options2 = {
              "1. My Book Add",
              "2. My Book Delete",
              "3. My Book Update",
              "4. My Book List",
              "5. All Book List",
              "6. Exit"
            };
            printMenu(title2, options2);
            int choice2 = scanner.nextInt();
            scanner.nextLine();

            switch (choice2) {
              case 1:
                //clearConsole();
                AddBookMenu(scanner, System.out);
                break;

              case 2:
                //clearConsole();
                deleteBookMenu(scanner, System.out);
                break;

              case 3:
                //clearConsole();
                updateBookMenu(scanner, System.out);
                break;

              case 4:
                clearConsole();
                listBookMenu(scanner, System.out);
                break;

              case 5:
                clearConsole();
                listAllBookMenu(scanner, System.out);
                break;

              case 6:
                choice = 5;
                break;
            }

            break;

          case 2:
        	  clearConsole();
            System.out.println("Wishlist and Trade List Management");
            String title3 = "WISHLIST OR TRADE MENU";
            String[] options3 = {
              "1. My Wish List",
              "2. My Trade List",
              "3. Exit"
            };
            printMenu(title3, options3);
            int choice3 = scanner.nextInt();
            scanner.nextLine();

            switch (choice3) {
              case 1:
            	  clearConsole();
                String title4 = "MY WISHLIST MENU";
                String[] options4 = {
                  "1. My Wish Book Add",
                  "2. My Wish Book Delete",
                  "3. My Wish Book List",
                  "4. My Book List",
                  "5. Return",
                  "5. Exit"
                };
                printMenu(title4, options4);
                int choice4 = scanner.nextInt();
                scanner.nextLine();

                switch (choice4) {
                  case 1:
                    clearConsole();
                    WishAddBookMenu(scanner, System.out);
                    break;

                  case 2:
                    clearConsole();
                    WishdeleteBookMenu(scanner, System.out);
                    break;

                  case 3:
                    clearConsole();
                    WishlistBookMenu(scanner, System.out);
                    break;

                  case 4:
                    clearConsole();
                    listBookMenu(scanner, System.out);
                    break;

                  case 5:
                    choice = 5;
                    break;

                  case 6:
                    break;
                }

                break;

              case 2:
            	  clearConsole();
                String title5 = "MY TRADE MENU";
                String[] options5 = {
                  "1. Buy Book",
                  "2. Sell Book",
                  "3. Return",
                  "4. Exit"
                };
                printMenu(title5, options5);
                int choice5 = scanner.nextInt();
                scanner.nextLine();

                switch(choice5) {
                  case 1:
                	  clearConsole();
                    String title6 = "MY BUY MENU";
                    String[] options6 = {
                      "1. Buy New Book",
                      "2. Trade Book List",
                      "3. Return",
                      "4. Exit"
                    };
                    printMenu(title6, options6);
                    int choice6 = scanner.nextInt();
                    scanner.nextLine();

                    switch(choice6) {
                      case 1:
                        clearConsole();
                        TradeBuyBookMenu(scanner, System.out);
                        break;

                      case 2:
                        clearConsole();
                        TradeAllListBookMenu(scanner, System.out);
                        break;

                      case 3:
                        choice = 5;
                        break;

                      case 4:
                        break;
                    }

                    break;

                  case 2:
                    String title7 = "MY SELL MENU";
                    String[] options7 = {
                      "1. Add Sell New Book",
                      "2. Delete Sell Book",
                      "3. Trade Book List",
                      "4. My Trade Book List",
                      "5. Return",
                      "6. Exit"
                    };
                    printMenu(title7, options7);
                    int choice7 = scanner.nextInt();
                    scanner.nextLine();

                    switch(choice7) {
                      case 1:
                        clearConsole();
                        TradeAddBookMenu(scanner, System.out);
                        break;

                      case 2:
                        clearConsole();
                        TradedeleteBookMenu(scanner, System.out);
                        break;

                      case 3:
                        clearConsole();
                        TradeAllListBookMenu(scanner, System.out);
                        break;

                      case 4:
                        clearConsole();
                        TradeMylistBookMenu(scanner, System.out);
                        break;

                      case 5:
                        choice = 5;
                        break;

                      case 6:
                        exit = true;
                        break;
                    }

                    break;

                  case 3:
                    choice = 5;
                    break;
                }

                break;

              case 3:
                choice = 5;
                break;
            }

            break;

          case 3:
        	  clearConsole();
            System.out.println("Comic Book Events and Conventions");
            String title8 = "MY EVENT MENU";
            String[] options8 = {
              "1. Add My Event",
              "2. Sell My Event",
              "3. Update My Event",
              "4. My Event List",
              "5. All Event List",
              "6. Return",
              "7. Exit"
            };
            printMenu(title8, options8);
            int choice8 = scanner.nextInt();
            scanner.nextLine();

            switch(choice8) {
              case 1:
                clearConsole();
                EventAddBookMenu(scanner, System.out);
                break;

              case 2:
                clearConsole();
                EventdeleteBookMenu(scanner, System.out);
                break;

              case 3:
                clearConsole();
                EventupdateBookMenu(scanner, System.out);
                break;

              case 4:
                clearConsole();
                EventlistBookMenu(scanner, System.out);
                break;

              case 5:
                clearConsole();
                EventlistAllBookMenu(scanner, System.out);
                break;

              case 6:
                choice = 5;
                break;

              case 7:
                break;
            }

            break;

          case 4:
        	  clearConsole();
            String title9 = "MY CREDIT SCORE MENU";
            String[] options9 = {
              "1. Buy Credit Score",
              "2. Exit"
            };
            printMenu(title9, options9);
            int choice9 = scanner.nextInt();
            scanner.nextLine();

            switch(choice9) {
              case 1:
                clearConsole();
                CreditBuyScoreMenu(scanner, System.out);
                break;

              case 2:
                choice = 5;
                break;
            }

            break;

          case 5:
            //System.exit(0);
            //return 0;
            return 0;
        }
      }
    }

    scanner.close();
    return 0;
  }

  /**
   * Returns the login name of the current user.
   *
   * @return The login name of the current user.
   */
  public static String getLoginName() {
    return LoginName;
  }

  /**
   * Sets the login name of the current user.
   *
   * @param loginName The login name to be set.
   */
  public static void setLoginName(String loginName) {
    LoginName = loginName;
  }

  /**
   * Returns the wallet balance of the current user.
   *
   * @return The wallet balance of the current user.
   */
  public static int getWallet() {
    return LoginWallet;
  }

  /**
   * Sets the wallet balance of the current user.
   *
   * @param loginWallet The wallet balance to be set.
   */
  public static void setWallet(int loginWallet) {
    LoginWallet = loginWallet;
  }



}
